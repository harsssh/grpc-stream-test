// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chat/v1/chat.proto

package chatv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "grpc-stream-test/gen/chat/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "chat.v1.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceSendMessageProcedure is the fully-qualified name of the ChatService's SendMessage RPC.
	ChatServiceSendMessageProcedure = "/chat.v1.ChatService/SendMessage"
	// ChatServiceGetMessagesProcedure is the fully-qualified name of the ChatService's GetMessages RPC.
	ChatServiceGetMessagesProcedure = "/chat.v1.ChatService/GetMessages"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	chatServiceServiceDescriptor           = v1.File_chat_v1_chat_proto.Services().ByName("ChatService")
	chatServiceSendMessageMethodDescriptor = chatServiceServiceDescriptor.Methods().ByName("SendMessage")
	chatServiceGetMessagesMethodDescriptor = chatServiceServiceDescriptor.Methods().ByName("GetMessages")
)

// ChatServiceClient is a client for the chat.v1.ChatService service.
type ChatServiceClient interface {
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	GetMessages(context.Context, *connect.Request[v1.GetMessagesRequest]) (*connect.ServerStreamForClient[v1.GetMessagesResponse], error)
}

// NewChatServiceClient constructs a client for the chat.v1.ChatService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatServiceClient{
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+ChatServiceSendMessageProcedure,
			connect.WithSchema(chatServiceSendMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMessages: connect.NewClient[v1.GetMessagesRequest, v1.GetMessagesResponse](
			httpClient,
			baseURL+ChatServiceGetMessagesProcedure,
			connect.WithSchema(chatServiceGetMessagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	sendMessage *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
	getMessages *connect.Client[v1.GetMessagesRequest, v1.GetMessagesResponse]
}

// SendMessage calls chat.v1.ChatService.SendMessage.
func (c *chatServiceClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// GetMessages calls chat.v1.ChatService.GetMessages.
func (c *chatServiceClient) GetMessages(ctx context.Context, req *connect.Request[v1.GetMessagesRequest]) (*connect.ServerStreamForClient[v1.GetMessagesResponse], error) {
	return c.getMessages.CallServerStream(ctx, req)
}

// ChatServiceHandler is an implementation of the chat.v1.ChatService service.
type ChatServiceHandler interface {
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	GetMessages(context.Context, *connect.Request[v1.GetMessagesRequest], *connect.ServerStream[v1.GetMessagesResponse]) error
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceSendMessageHandler := connect.NewUnaryHandler(
		ChatServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(chatServiceSendMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetMessagesHandler := connect.NewServerStreamHandler(
		ChatServiceGetMessagesProcedure,
		svc.GetMessages,
		connect.WithSchema(chatServiceGetMessagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/chat.v1.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceSendMessageProcedure:
			chatServiceSendMessageHandler.ServeHTTP(w, r)
		case ChatServiceGetMessagesProcedure:
			chatServiceGetMessagesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.SendMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) GetMessages(context.Context, *connect.Request[v1.GetMessagesRequest], *connect.ServerStream[v1.GetMessagesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.GetMessages is not implemented"))
}
